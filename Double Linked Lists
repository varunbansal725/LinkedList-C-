#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
    struct Node *prev;
    }*first=NULL;

void create(int arr[], int size) {
    struct Node *t, *last;
    first=(struct Node *)malloc(sizeof(struct Node));
    first->data=arr[0];
    first->prev=NULL;
    first->next=NULL;
    last=first;
    for(int i=1; i < size; i++) {
        t=(struct Node *)malloc(sizeof(struct Node));
        t->data=arr[i];
        last->next=t;
        t->prev=last;
        t->next=NULL;
        last=t;
    }
}

void display(struct Node *p) {
    while(p!=NULL) {
        printf("%d ", p->data);
        p=p->next;
    }
    printf("\n");
}

int count(struct Node *p) {
    int count;
    while(p) {
        count++;
        p=p->next;
    }
return count;
}

void insert_at_last(int element) {
    struct Node *t, *last;
    t=(struct Node *)malloc(sizeof(struct Node));
    t->data=element;
    t->next=NULL;
    t->prev=NULL;
    if(first==NULL) {
        first=t;
        last=first;
    }
    else {
        last->next=t;
        t->prev=last;
        t->next=NULL;
        last=t;
    }
}

void insert(int position, int key) {
    struct Node *t, *p=first;
    t=(struct Node *)malloc(sizeof(struct Node));
    t->data=key;
    t->prev=NULL;
    t->next=NULL;
        if(position==0) {
            t->next=first;
            first->prev=t;
            first=t;
        }
        else {
        for(int i=0; i < position-1; i++)
            p=p->next;
        if(p->next!=NULL) {
            t->next=p->next;
            p->next=t;
            t->prev=p;
            t->next->prev=t;
        }
        else if(p->next==NULL) {
            t->next=p->next;
            t->prev=p;
            p->next=t;
        }
}
}


int search(struct Node *p, int key) {
    int position=0;
    while(p) {
    if(p->data==key)
        return position;
    else {
        p=p->next;
        position++;
    }
    }
}

void delete(struct Node *p, int position) {
    struct Node *temp=p;
    int k=0;
    if(position==0) {
        p=p->next;
        p->prev=NULL;
        free(temp);
    }
    else {
        while(temp && k < position) {
            k++;
            temp=temp->next;
        }
        if(temp->next!=NULL) {
        temp->prev->next=temp->next;
        temp->next->prev=temp->prev;
        free(temp);
        }
        else {
            temp->prev->next=NULL;
            free(temp);
        }
    }
}

void reverse() {
    struct Node *p, *q;
    q=first;
    p=first->next;
    first=first->next;
    q->prev=q->next;
    q->next=NULL;
    while(first) {
        first=first->next;
        p->next=q;
        q=p;
        p=first;
        q->prev=p;
    }
    first=q;
}

void duplicate(struct Node *p) {
    int i, a;
    int hash[5];
    for(i=0; i <= 5; i++)
        hash[i]=0;
    while(p) {
        hash[p->data]++;
        p=p->next;
    }
    for(i=0; i<=5; i++) {
        if(hash[i] > 1)
            a=i;
    }
    if(a > 1 && a < 5)
        printf("The duplicate value is %d\n", a);
    else
        printf("There are no duplicates");
}

void sorted_insert(struct Node *p, int key) {
    struct Node *t;
    t=(struct Node *)malloc(sizeof(struct Node));
    t->data=key;
    t->prev=NULL;
    t->next=NULL;
    if(key < first->data) {
        t->next=first;
        first->prev=t;
        first=t;
    }
    else {
    while(p->next!=NULL && key > p->next->data)
        p=p->next;
    t->next=p->next;
    t->prev=p;
    p->next=t;
    t->prev=p;
}
}

void delete_list(struct Node *p) {
    struct Node *temp=first;
    while(p) {
        temp=p;
        p=p->next;
        free(temp);
    }
    free(p);
}



void main() {
    int A[5]={1,2,3,5,6};
    int a;
    int size = sizeof(A) / sizeof(A[0]);
    create(A, size);
    /* The list can be made by inserting an element repeatedly also:
    insert_at_last(5);
    insert_at_last(10); */
    display(first);
    sorted_insert(first, 4);
    display(first);
    printf("List is of %d elements\n", count(first));
    delete(first, 3);
    display(first);
    printf("List is of %d elements\n", count(first));
    insert(0, 6);
    display(first);
    printf("Element found at %d index\n", search(first, 6));
    reverse();
    display(first);
    printf("List is of %d elements\n", count(first));
    duplicate(first);
    delete_list(first);
}
